global
	log 127.0.0.1 local0
	log 127.0.0.1 local1 notice
	chroot /var/lib/haproxy
	stats socket /run/haproxy/admin.sock mode 660 level admin
	stats timeout 30s
	user haproxy
	group haproxy
	daemon
	maxconn 20000
	tune.ssl.default-dh-param 4096
	# Default SSL material locations
	ca-base /etc/ssl/certs
	crt-base /etc/ssl/private

	# Default ciphers to use on SSL-enabled listening sockets.
	# For more information, see ciphers(1SSL). This list is from:
	#  https://hynek.me/articles/hardening-your-web-servers-ssl-ciphers/

	ssl-default-bind-ciphers EECDH+CHACHA20:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:!MD5
	ssl-default-bind-options force-tlsv12

defaults
	log	global
	mode	http
	option forwardfor
	option http-server-close
	option	dontlognull
	stats enable
        stats hide-version
        stats uri /admin?stats
        stats realm *Tech-rd\ Statistics
        stats auth admin:{{ haproxy_statpass }}
	stats refresh 10s
        timeout connect 5000
        timeout client  600s
        timeout server  600s
	errorfile 400 /etc/haproxy/errors/400.http
	errorfile 403 /etc/haproxy/errors/403.http
	errorfile 408 /etc/haproxy/errors/408.http
	errorfile 500 /etc/haproxy/errors/500.http
	errorfile 502 /etc/haproxy/errors/502.http
	errorfile 503 /etc/haproxy/errors/503.http
	errorfile 504 /etc/haproxy/errors/504.http

frontend http-in
	mode http
	bind {{ ansible_default_ipv4.address }}:80
	redirect scheme https code 301 if !{ ssl_fc }

frontend https-in
	bind {{ ansible_default_ipv4.address }}:443 ssl crt /etc/letsencrypt/live/{{ domain }}/{{ domain }}.pem
        http-response set-header strict-transport-security "max-age=31536000; includeSubDomains"
        http-response set-header Content-Security-Policy "default-src 'self' wss: https: *.{{ domain }}/*; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://code.jquery.com; style-src 'self' 'unsafe-inline' https:; img-src 'self' https://casper.ghost.org/ data:; font-src 'self' https:"
        {# http-response set-header x-frame-options "SAMEORIGIN" if !is_embedded #}
        http-response set-header X-XSS-Protection "1; mode=block"
        http-response set-header X-Content-Type-Options "nosniff"
        http-response set-header Referrer-Policy "no-referrer"
	reqadd X-Forwarded-Proto:\ https
	option forwardfor
	default_backend ghost


backend ghost
    mode        http
    balance     leastconn
    timeout     connect 1s
    timeout     server  600s
    timeout     queue   600s
    option redispatch
    retries 3
    acl is_woff capture.req.uri -m sub .woff
    acl is_ttf capture.req.uri -m sub .ttf
    acl is_eot capture.req.uri -m sub .eot
    http-response set-header Cache-Control public if is_eot or is_woff or is_ttf
    http-response set-header Expires -1 if is_eot or is_woff or is_ttf
    http-response set-header Pragma cache if is_eot or is_woff or is_ttf
    cookie ghost insert indirect nocache secure

{% for node in groups['backend'] %}
    server {{ hostvars[node].inventory_hostname }} {{ hostvars[node].ip }}:{{ ghost_port }} cookie ghost_{{ hostvars[node].inventory_hostname }} check inter 1000 fastinter 500 rise 2 fall 1
{% endfor %}
